name: legate-boost build/test

concurrency:
  group: ci-on-${{ github.event_name }}-from-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches:
      - "pull-request/[0-9]+"
      - "branch-*"
      - "main"
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - name: short-circuit
      run: exit 0
    # - uses: actions/checkout@v4
    # - uses: pre-commit/action@v3.0.1

  conda-python-build:
    needs: [pre-commit]
    uses: rapidsai/shared-workflows/.github/workflows/conda-python-build.yaml@branch-24.10
    with:
      build_type: pull-request
      # legion-core=24.06:
      #
      #   * ... only supports Python 3.10+
      #   * ... only support x86_64
      #
      # this filters down to the jobs in the RAPIDS test matrix which match those constraints
      #
      # TODO: build against more Python and CUDA versions (remove those last conditions)
      # NOTE: there are not CUDA 11 packages for legate-core or cunumeric
      # TODO: maybe need to not use the RAPIDS matrix, 12.5.1 might be too high
      matrix_filter: map(select(.PY_VER != "3.9") | select(.ARCH != "arm64") | select(.CUDA_VER == "12.5.1") | select(.PY_VER == "3.10"))
      # TODO: revert this... building should not require a GPU.
      #       Just adding this because import tests after conda-build are failing with errors
      #       like "libcuda.so.1: cannot open shared object file: No such file or directory"
      #node_type: "gpu-v100-latest-1"
      script: ci/build_python.sh

  conda-python-tests:
    needs: [conda-python-build]
    uses: rapidsai/shared-workflows/.github/workflows/conda-python-test.yaml@branch-24.10
    with:
      build_type: pull-request
      matrix_filter: map(select(.PY_VER != "3.9") | select(.ARCH != "arm64") | select(.CUDA_VER == "12.5.1") | select(.PY_VER == "3.10"))
      script: ci/test_python.sh

  # build-test:
  #   needs: [pre-commit, conda-python-build]
  #   defaults:
  #     run:
  #       shell: bash -el {0}
  #   runs-on: linux-amd64-gpu-v100-latest-1
  #   env:
  #     CONDA_PREFIX: /opt/conda
  #   container:
  #     image: rapidsai/devcontainers:24.08-cpp-cuda11.8-mambaforge-ubuntu22.04
  #     env:
  #       NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }} # GPU jobs must set this container env variable
  #   steps:
  #     - name: Checkout legate-boost
  #       uses: actions/checkout@v4
  #       with:
  #         lfs: true
  #     - name: Install legate/cunumeric
  #       run: |
  #         mamba install --yes -c rapidsai \
  #           'rapids-dependency-file-generator>=1.14.0'

  #         rapids-dependency-file-generator \
  #           --output conda \
  #           --file-key all \
  #           --matrix "cuda=${CUDA_VERSION};arch=$(arch)" | tee /tmp/env.yaml

  #         # update the current environment (instead of creating a new one), as that
  #         # persists across all steps
  #         mamba env update \
  #           --name base \
  #           --file /tmp/env.yaml
      # - name: Type check legate-boost
      #   run: |
      #     mypy ./legateboost --config-file ./pyproject.toml --exclude=legateboost/test --exclude=install_info
      # - name: Build legate-boost
      #   env:
      #     CUDAARCHS: '70;80'
      #   run: |
      #     ci/build_wheel.sh
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: legateboost-wheel
      #     path: dist/legate_boost*.whl
      #     if-no-files-found: error
      # - name: Install legate-boost
      #   run: |
      #     python -m pip install --no-deps dist/*.whl
      # - name: Run cpu tests
      #   run: |
      #     exit 0
      #     # legate --sysmem 28000 --module pytest legateboost/test/[!_]**.py -sv --durations=0
      # - name: Run gpu tests
      #   run: |
      #     nvidia-smi
      #     exit 0
      #     # legate --gpus 1 --fbmem 28000 --sysmem 28000 --module pytest legateboost/test/[!_]**.py -sv --durations=0 -k 'not sklearn'
      # - name: Build legate-boost docs
      #   working-directory: docs
      #   run: |
      #     make html
      # - uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: docs/build/html


  deploy:
    needs:
      - conda-python-build
      - conda-python-tests
      # - build-test
    # only main branch uploads docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
